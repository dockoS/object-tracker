import numpy as np
# import math
# def signe(speed1,speed2):
#     return (speed1[0]*speed2[0]>=0 and speed1[1]*speed2[1]>=0)

	 
# a=np.dot(np.array((-195.4768824306473, 208.8372763300108)),np.array((736.613394530771, 3.4097156771718375)))

# def distance(p,q):
#     return math.sqrt((p[0]-q[0])**2 +(p[1]-q[1])**2)
# print(distance((346.76409912109375, 245.25283813476562),[262.66351318, 246.55212402]))
# from scipy.spatial import distance as dist
# L1=np.array([[7,2],[8,1],[2,4]], dtype="float")
# L2=np.array([[1,2],[2,5]], dtype="float")
# D = dist.cdist(L1, L2)
# rows = D.min(axis=0).argsort()
# cols = D.argmin(axis=1)[rows]
# import matplotlib.pyplot as plt
# measuredData=np.array([[ 72.00886536, 253.45713806],
#  [ 92.6960144,  249.20121765],
#  [110.47786713 ,254.28997803],
#  [134.41598511 ,250.93731689],
#  [174.36199951, 248.41990662],
#  [213.96905518, 249.12754822],
#  [253.09524536 ,246.5753479 ],
#  [298.17791748, 244.70758057],
#  [317.23446655 ,246.06491089],
#  [367.33648682 ,243.51268005],
#  [412.06152344, 241.08807373],
#  [461.62405396 ,241.70294189],
#  [501.14471436 ,238.57550049],
#  [513.03314209, 234.74717712],
#  [534.16723633 ,237.62342834],
#  [564.9006958 , 236.35728455],
#  [583.27368164, 233.42721558],
#  [583.27368164, 233.42721558],
#  [583.27368164, 233.42721558],
#  [583.27368164, 233.42721558],
#  [583.27368164 ,233.42721558],
#  [583.27368164 ,233.42721558],
#  [583.27368164, 233.42721558],
#  [583.27368164,233.42721558],
#  [583.27368164, 233.42721558],
#  [583.27368164 ,233.42721558],
#  [583.27368164 ,233.42721558],
#  [583.27368164, 233.42721558],
#  [583.27368164, 233.42721558],
#  [583.27368164, 233.42721558],
#  [583.27368164 ,233.42721558],
#  [583.27368164, 233.42721558],
#  [572.30926514 ,233.44047546]])
# predictedData=np.array([[  56.44391251  ,256.86450195],
#  [  72.1520503  , 253.42579308],
#  [ 113.54648649 , 244.91169716],
#  [ 129.08139119 , 259.61388199],
#  [ 156.68844096 , 247.81794063],
#  [ 217.15225497 , 245.72325138],
#  [ 251.9290184  , 249.80576195],
#  [ 292.73434273 , 243.98969066],
#  [ 342.46570338 , 242.87274523],
#  [ 336.48537061 , 247.43608443],
#  [ 418.4332215  , 240.90977779],
#  [ 456.43742011  ,238.68239477],
#  [ 508.76160558,  242.287726  ],
#  [ 544.89336773 , 235.11347965],
#  [ 524.05946151 , 231.19647074],
#  [ 555.21206268 , 240.48753062],
#  [ 596.42690366 , 235.05848144],
#  [1550.94335103 ,  79.10614354],
#  [ 573.85799238 , 233.75660889],
#  [ 574.00292227 , 233.75153874],
#  [ 573.59086938 , 233.76595378],
#  [ 573.8492766  , 233.7569138 ],
#  [ 573.73428349 , 233.76093665],
#  [ 574.057215   , 233.7496394 ],
#  [ 573.71302803 , 233.76168024],
#  [ 574.26756489 , 233.74228063],
#  [ 573.5317537  , 233.76802185],
#  [ 573.8546163  , 233.756727  ],
#  [ 573.87501053 , 233.75601354],
#  [ 574.09359389 , 233.74836674],
#  [ 573.75578011 , 233.76018463],
#  [ 573.68336684 ,233.76271789],
#  [ 573.98855675 , 233.7520413 ]]

# )
# data=[{'speed': (-0.0016459982554994927, 0.00032828244034289474), 'time': (0, 8883.665283203125)}, {'speed': (-0.1909121778653596, 0.012167636654113887), 'time': (8883.665283203125, 8971.380859375)}, {'speed': (-0.3707517225089816, -0.0021886361740476876), 'time': (8971.380859375, 9231.855224609375)}, {'speed': (-0.23047078552268507, 0.02013161990228617), 'time': (9231.855224609375, 9301.6640625)}, {'speed': (-0.4018645468962647, 0.01527006077374994), 'time': (9301.6640625, 9366.782958984375)}, {'speed': (-0.2764560898058427, -0.03779646934415262), 'time': (9366.782958984375, 9434.659423828125)}, {'speed': (-0.4085238874887323, 0.029271601758678416), 'time': (9434.659423828125, 9501.015625)}, {'speed': (-0.5832502511348273, 0.0190730292524868), 'time': (9567.70361328125, 9632.3515625)}, {'speed': (-0.6779367905075168, 0.21624804677745035), 'time': (9699.52880859375, 9767.962890625)}, {'speed': (-1.2979291022993455, -0.2403818438546691), 'time': (9901.4638671875, 9968.37744140625)}, {'speed': (-0.3029465866596137, 0.02483598186800673), 'time': (9968.37744140625, 10034.8388671875)}, {'speed': (-0.11543027909485604, 0.00850128438705881), 'time': (10034.8388671875, 10099.562255859375)}, {'speed': (-0.3846577161510158, -0.015841768436725988), 'time': (10099.562255859375, 10167.772216796875)}, {'speed': (-0.3641008265115664, 0.010076726507157343), 'time': (10167.772216796875, 10234.219482421875)}, {'speed': (-0.10024169723743111, 0.029364688104759493), 'time': (10234.219482421875, 10300.70361328125)}, {'speed': (-0.19022573269398108, 0.008746968322440894), 'time': (10300.70361328125, 10366.637451171875)}]
# liste=list()
# for speed in data:
#     liste.append(list(speed["speed"]))
# liste=np.array(liste)
# plt.plot(liste[:,0],liste[:,1],"-b",label='speed')
# #plt.plot(predictedData[:,0],predictedData[:,1],"--r",label='predicted values')
# plt.legend()

# #plt.show()
# def derivation(valueA,valueB,t,t_i_1,type="speed"):
# 	vx=0
# 	vy=0
# 	if t!=t_i_1 :
# 		vx=(valueA[0]-valueB[0])/(t-t_i_1)
# 		vy=(valueA[1]-valueB[1])/(t-t_i_1)
		
# 	return {type:[vx,vy],"time":(t,t_i_1)}
# from decimal import *
# liste=[1,2,4,5,5,6,6,6,6,6]
# for i in range(len(liste)):
# 	if liste[i]==liste[i+1]:
# 		liste=liste[:i]
# 		breakdf.to_csv("data.csv", index=False)
import pandas as pd
# info={"id":[2,4,5,6]}
# data=[1,2,3,4]
# df=pd.DataFrame.from_dict(info)
from collections import OrderedDict
data=np.array([[1,2,3],[2,4,5]])
dictio=OrderedDict()
dictio=[]
# dictio.append({"data":data,"id":1})
# dictio.append({"data":data,"id":2})
# dictio.append({"data":data,"id":3})
# dictio.append({"data":data,"id":4})
# df=pd.DataFrame.from_dict(dictio)
# for d in df.values:
# 	print(d[0])
d={1:2,"lsd":6}
print(d.keys())